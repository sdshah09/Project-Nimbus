class Solution {
    public int fib(int n) {
        int[] memo = new int[n + 1];
        Arrays.fill(memo, -1);
        // return topDownDP(n, memo);
        return bottomUpDP(n);
    }

    private int bottomUpDP(int n) {
        if (n == 0) return 0;
        if (n == 1) return 1;
        int[] memo = new int[n + 1];
        Arrays.fill(memo, -1);
        memo[0] = 0;
        memo[1] = 1;
        for(int i = 2; i <= n; i++){
            if(memo[i] == -1){
                memo[i] = memo[i-1] + memo[i-2];
            }
        }
        return memo[n];
    }

    private int topDownDP(int n, int[] memo) {
        if(n == 0)
        {
            return 0;
        }
        if(n == 1)
        {
            return 1;
        }
        if(memo[n] == -1){
            memo[n] = topDownDP(n - 1, memo) + topDownDP(n - 2, memo);
        }
        return memo[n];
    }

    // T: O(n), S: O(n)
}
